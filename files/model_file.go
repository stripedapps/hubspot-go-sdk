/*
Files

Upload and manage files.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the File type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &File{}

// File File
type File struct {
	// Extension of the file. ex: .jpg, .png, .gif, .pdf, etc.
	Extension *string `json:"extension,omitempty"`
	// File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.
	Access string `json:"access"`
	// ID of the folder the file is in.
	ParentFolderId *string `json:"parentFolderId,omitempty"`
	SourceGroup *string `json:"sourceGroup,omitempty"`
	FileMd5 *string `json:"fileMd5,omitempty"`
	// Encoding of the file.
	Encoding *string `json:"encoding,omitempty"`
	// Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.
	Type *string `json:"type,omitempty"`
	// Previously \"archied\". Indicates if the file should be used when creating new content like web pages.
	IsUsableInContent *bool `json:"isUsableInContent,omitempty"`
	// URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.
	Url *string `json:"url,omitempty"`
	ExpiresAt *int64 `json:"expiresAt,omitempty"`
	// Creation time of the file object.
	CreatedAt time.Time `json:"createdAt"`
	// Deletion time of the file object.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`
	// Path of the file in the file manager.
	Path *string `json:"path,omitempty"`
	// If the file is deleted.
	Archived bool `json:"archived"`
	// Size of the file in bytes.
	Size *int64 `json:"size,omitempty"`
	// Name of the file.
	Name *string `json:"name,omitempty"`
	// For image and video files, the width of the content.
	Width *int32 `json:"width,omitempty"`
	// File ID.
	Id string `json:"id"`
	// Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.
	DefaultHostingUrl *string `json:"defaultHostingUrl,omitempty"`
	// Timestamp of the latest update to the file.
	UpdatedAt time.Time `json:"updatedAt"`
	// For image and video files, the height of the content.
	Height *int32 `json:"height,omitempty"`
}

type _File File

// NewFile instantiates a new File object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFile(access string, createdAt time.Time, archived bool, id string, updatedAt time.Time) *File {
	this := File{}
	this.Access = access
	this.CreatedAt = createdAt
	this.Archived = archived
	this.Id = id
	this.UpdatedAt = updatedAt
	return &this
}

// NewFileWithDefaults instantiates a new File object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileWithDefaults() *File {
	this := File{}
	return &this
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *File) GetExtension() string {
	if o == nil || IsNil(o.Extension) {
		var ret string
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *File) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given string and assigns it to the Extension field.
func (o *File) SetExtension(v string) {
	o.Extension = &v
}

// GetAccess returns the Access field value
func (o *File) GetAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *File) GetAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *File) SetAccess(v string) {
	o.Access = v
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise.
func (o *File) GetParentFolderId() string {
	if o == nil || IsNil(o.ParentFolderId) {
		var ret string
		return ret
	}
	return *o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetParentFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderId) {
		return nil, false
	}
	return o.ParentFolderId, true
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *File) HasParentFolderId() bool {
	if o != nil && !IsNil(o.ParentFolderId) {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given string and assigns it to the ParentFolderId field.
func (o *File) SetParentFolderId(v string) {
	o.ParentFolderId = &v
}

// GetSourceGroup returns the SourceGroup field value if set, zero value otherwise.
func (o *File) GetSourceGroup() string {
	if o == nil || IsNil(o.SourceGroup) {
		var ret string
		return ret
	}
	return *o.SourceGroup
}

// GetSourceGroupOk returns a tuple with the SourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetSourceGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SourceGroup) {
		return nil, false
	}
	return o.SourceGroup, true
}

// HasSourceGroup returns a boolean if a field has been set.
func (o *File) HasSourceGroup() bool {
	if o != nil && !IsNil(o.SourceGroup) {
		return true
	}

	return false
}

// SetSourceGroup gets a reference to the given string and assigns it to the SourceGroup field.
func (o *File) SetSourceGroup(v string) {
	o.SourceGroup = &v
}

// GetFileMd5 returns the FileMd5 field value if set, zero value otherwise.
func (o *File) GetFileMd5() string {
	if o == nil || IsNil(o.FileMd5) {
		var ret string
		return ret
	}
	return *o.FileMd5
}

// GetFileMd5Ok returns a tuple with the FileMd5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetFileMd5Ok() (*string, bool) {
	if o == nil || IsNil(o.FileMd5) {
		return nil, false
	}
	return o.FileMd5, true
}

// HasFileMd5 returns a boolean if a field has been set.
func (o *File) HasFileMd5() bool {
	if o != nil && !IsNil(o.FileMd5) {
		return true
	}

	return false
}

// SetFileMd5 gets a reference to the given string and assigns it to the FileMd5 field.
func (o *File) SetFileMd5(v string) {
	o.FileMd5 = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *File) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *File) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *File) SetEncoding(v string) {
	o.Encoding = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *File) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *File) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *File) SetType(v string) {
	o.Type = &v
}

// GetIsUsableInContent returns the IsUsableInContent field value if set, zero value otherwise.
func (o *File) GetIsUsableInContent() bool {
	if o == nil || IsNil(o.IsUsableInContent) {
		var ret bool
		return ret
	}
	return *o.IsUsableInContent
}

// GetIsUsableInContentOk returns a tuple with the IsUsableInContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetIsUsableInContentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUsableInContent) {
		return nil, false
	}
	return o.IsUsableInContent, true
}

// HasIsUsableInContent returns a boolean if a field has been set.
func (o *File) HasIsUsableInContent() bool {
	if o != nil && !IsNil(o.IsUsableInContent) {
		return true
	}

	return false
}

// SetIsUsableInContent gets a reference to the given bool and assigns it to the IsUsableInContent field.
func (o *File) SetIsUsableInContent(v bool) {
	o.IsUsableInContent = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *File) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *File) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *File) SetUrl(v string) {
	o.Url = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *File) GetExpiresAt() int64 {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret int64
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetExpiresAtOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *File) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given int64 and assigns it to the ExpiresAt field.
func (o *File) SetExpiresAt(v int64) {
	o.ExpiresAt = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *File) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *File) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *File) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *File) GetArchivedAt() time.Time {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret time.Time
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *File) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given time.Time and assigns it to the ArchivedAt field.
func (o *File) SetArchivedAt(v time.Time) {
	o.ArchivedAt = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *File) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *File) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *File) SetPath(v string) {
	o.Path = &v
}

// GetArchived returns the Archived field value
func (o *File) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *File) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *File) SetArchived(v bool) {
	o.Archived = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *File) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *File) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *File) SetSize(v int64) {
	o.Size = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *File) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *File) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *File) SetName(v string) {
	o.Name = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *File) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *File) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *File) SetWidth(v int32) {
	o.Width = &v
}

// GetId returns the Id field value
func (o *File) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *File) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *File) SetId(v string) {
	o.Id = v
}

// GetDefaultHostingUrl returns the DefaultHostingUrl field value if set, zero value otherwise.
func (o *File) GetDefaultHostingUrl() string {
	if o == nil || IsNil(o.DefaultHostingUrl) {
		var ret string
		return ret
	}
	return *o.DefaultHostingUrl
}

// GetDefaultHostingUrlOk returns a tuple with the DefaultHostingUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetDefaultHostingUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultHostingUrl) {
		return nil, false
	}
	return o.DefaultHostingUrl, true
}

// HasDefaultHostingUrl returns a boolean if a field has been set.
func (o *File) HasDefaultHostingUrl() bool {
	if o != nil && !IsNil(o.DefaultHostingUrl) {
		return true
	}

	return false
}

// SetDefaultHostingUrl gets a reference to the given string and assigns it to the DefaultHostingUrl field.
func (o *File) SetDefaultHostingUrl(v string) {
	o.DefaultHostingUrl = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *File) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *File) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *File) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *File) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *File) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *File) SetHeight(v int32) {
	o.Height = &v
}

func (o File) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o File) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	toSerialize["access"] = o.Access
	if !IsNil(o.ParentFolderId) {
		toSerialize["parentFolderId"] = o.ParentFolderId
	}
	if !IsNil(o.SourceGroup) {
		toSerialize["sourceGroup"] = o.SourceGroup
	}
	if !IsNil(o.FileMd5) {
		toSerialize["fileMd5"] = o.FileMd5
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IsUsableInContent) {
		toSerialize["isUsableInContent"] = o.IsUsableInContent
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	toSerialize["archived"] = o.Archived
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.DefaultHostingUrl) {
		toSerialize["defaultHostingUrl"] = o.DefaultHostingUrl
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	return toSerialize, nil
}

func (o *File) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access",
		"createdAt",
		"archived",
		"id",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFile := _File{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFile)

	if err != nil {
		return err
	}

	*o = File(varFile)

	return err
}

type NullableFile struct {
	value *File
	isSet bool
}

func (v NullableFile) Get() *File {
	return v.value
}

func (v *NullableFile) Set(val *File) {
	v.value = val
	v.isSet = true
}

func (v NullableFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFile(val *File) *NullableFile {
	return &NullableFile{value: val, isSet: true}
}

func (v NullableFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


