/*
Files

Upload and manage files.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SignedUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignedUrl{}

// SignedUrl Signed Url object with optional ancillary metadata of requested file
type SignedUrl struct {
	// Extension of the requested file.
	Extension string `json:"extension"`
	// Size in bytes of the requested file.
	Size int64 `json:"size"`
	// Name of the requested file.
	Name string `json:"name"`
	// For image and video files. The width of the file.
	Width *int32 `json:"width,omitempty"`
	// Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.
	Type string `json:"type"`
	// Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires.
	Url string `json:"url"`
	// Timestamp of when the URL will no longer grant access to the file.
	ExpiresAt time.Time `json:"expiresAt"`
	// For image and video files. The height of the file.
	Height *int32 `json:"height,omitempty"`
}

type _SignedUrl SignedUrl

// NewSignedUrl instantiates a new SignedUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignedUrl(extension string, size int64, name string, type_ string, url string, expiresAt time.Time) *SignedUrl {
	this := SignedUrl{}
	this.Extension = extension
	this.Size = size
	this.Name = name
	this.Type = type_
	this.Url = url
	this.ExpiresAt = expiresAt
	return &this
}

// NewSignedUrlWithDefaults instantiates a new SignedUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignedUrlWithDefaults() *SignedUrl {
	this := SignedUrl{}
	return &this
}

// GetExtension returns the Extension field value
func (o *SignedUrl) GetExtension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value
// and a boolean to check if the value has been set.
func (o *SignedUrl) GetExtensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extension, true
}

// SetExtension sets field value
func (o *SignedUrl) SetExtension(v string) {
	o.Extension = v
}

// GetSize returns the Size field value
func (o *SignedUrl) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SignedUrl) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SignedUrl) SetSize(v int64) {
	o.Size = v
}

// GetName returns the Name field value
func (o *SignedUrl) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SignedUrl) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SignedUrl) SetName(v string) {
	o.Name = v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *SignedUrl) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignedUrl) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *SignedUrl) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *SignedUrl) SetWidth(v int32) {
	o.Width = &v
}

// GetType returns the Type field value
func (o *SignedUrl) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SignedUrl) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SignedUrl) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *SignedUrl) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SignedUrl) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SignedUrl) SetUrl(v string) {
	o.Url = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *SignedUrl) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *SignedUrl) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *SignedUrl) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *SignedUrl) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignedUrl) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *SignedUrl) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *SignedUrl) SetHeight(v int32) {
	o.Height = &v
}

func (o SignedUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignedUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extension"] = o.Extension
	toSerialize["size"] = o.Size
	toSerialize["name"] = o.Name
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	toSerialize["expiresAt"] = o.ExpiresAt
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	return toSerialize, nil
}

func (o *SignedUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extension",
		"size",
		"name",
		"type",
		"url",
		"expiresAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignedUrl := _SignedUrl{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignedUrl)

	if err != nil {
		return err
	}

	*o = SignedUrl(varSignedUrl)

	return err
}

type NullableSignedUrl struct {
	value *SignedUrl
	isSet bool
}

func (v NullableSignedUrl) Get() *SignedUrl {
	return v.value
}

func (v *NullableSignedUrl) Set(val *SignedUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableSignedUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableSignedUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignedUrl(val *SignedUrl) *NullableSignedUrl {
	return &NullableSignedUrl{value: val, isSet: true}
}

func (v NullableSignedUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignedUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


