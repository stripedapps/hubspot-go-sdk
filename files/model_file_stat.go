/*
Files

Upload and manage files.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileStat{}

// FileStat struct for FileStat
type FileStat struct {
	File *File `json:"file,omitempty"`
	Folder *Folder `json:"folder,omitempty"`
}

// NewFileStat instantiates a new FileStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileStat() *FileStat {
	this := FileStat{}
	return &this
}

// NewFileStatWithDefaults instantiates a new FileStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileStatWithDefaults() *FileStat {
	this := FileStat{}
	return &this
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *FileStat) GetFile() File {
	if o == nil || IsNil(o.File) {
		var ret File
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileStat) GetFileOk() (*File, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *FileStat) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given File and assigns it to the File field.
func (o *FileStat) SetFile(v File) {
	o.File = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *FileStat) GetFolder() Folder {
	if o == nil || IsNil(o.Folder) {
		var ret Folder
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileStat) GetFolderOk() (*Folder, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *FileStat) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given Folder and assigns it to the Folder field.
func (o *FileStat) SetFolder(v Folder) {
	o.Folder = &v
}

func (o FileStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	return toSerialize, nil
}

type NullableFileStat struct {
	value *FileStat
	isSet bool
}

func (v NullableFileStat) Get() *FileStat {
	return v.value
}

func (v *NullableFileStat) Set(val *FileStat) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStat) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStat(val *FileStat) *NullableFileStat {
	return &NullableFileStat{value: val, isSet: true}
}

func (v NullableFileStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


