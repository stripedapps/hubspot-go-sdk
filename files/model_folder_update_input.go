/*
Files

Upload and manage files.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FolderUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderUpdateInput{}

// FolderUpdateInput Object for updating folders.
type FolderUpdateInput struct {
	// New parent folderId. If changed, the folder and all it's children will be moved into the specified folder. parentFolderId and parentFolderPath cannot be specified at the same time.
	ParentFolderId *int64 `json:"parentFolderId,omitempty"`
	// New name. If specified the folder's name and fullPath will change. All children of the folder will be updated accordingly.
	Name *string `json:"name,omitempty"`
}

// NewFolderUpdateInput instantiates a new FolderUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderUpdateInput() *FolderUpdateInput {
	this := FolderUpdateInput{}
	return &this
}

// NewFolderUpdateInputWithDefaults instantiates a new FolderUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderUpdateInputWithDefaults() *FolderUpdateInput {
	this := FolderUpdateInput{}
	return &this
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise.
func (o *FolderUpdateInput) GetParentFolderId() int64 {
	if o == nil || IsNil(o.ParentFolderId) {
		var ret int64
		return ret
	}
	return *o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderUpdateInput) GetParentFolderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParentFolderId) {
		return nil, false
	}
	return o.ParentFolderId, true
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *FolderUpdateInput) HasParentFolderId() bool {
	if o != nil && !IsNil(o.ParentFolderId) {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given int64 and assigns it to the ParentFolderId field.
func (o *FolderUpdateInput) SetParentFolderId(v int64) {
	o.ParentFolderId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FolderUpdateInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderUpdateInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FolderUpdateInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FolderUpdateInput) SetName(v string) {
	o.Name = &v
}

func (o FolderUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentFolderId) {
		toSerialize["parentFolderId"] = o.ParentFolderId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableFolderUpdateInput struct {
	value *FolderUpdateInput
	isSet bool
}

func (v NullableFolderUpdateInput) Get() *FolderUpdateInput {
	return v.value
}

func (v *NullableFolderUpdateInput) Set(val *FolderUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderUpdateInput(val *FolderUpdateInput) *NullableFolderUpdateInput {
	return &NullableFolderUpdateInput{value: val, isSet: true}
}

func (v NullableFolderUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


