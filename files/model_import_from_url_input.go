/*
Files

Upload and manage files.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ImportFromUrlInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportFromUrlInput{}

// ImportFromUrlInput struct for ImportFromUrlInput
type ImportFromUrlInput struct {
	// One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.
	FolderPath *string `json:"folderPath,omitempty"`
	// PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file. 
	Access string `json:"access"`
	// ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder. 
	DuplicateValidationScope *string `json:"duplicateValidationScope,omitempty"`
	// Name to give the resulting file in the file manager.
	Name *string `json:"name,omitempty"`
	// NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 
	DuplicateValidationStrategy *string `json:"duplicateValidationStrategy,omitempty"`
	// Time to live. If specified the file will be deleted after the given time frame. If left unset, the file will exist indefinitely
	Ttl *string `json:"ttl,omitempty"`
	// If true, will overwrite existing file if one with the same name and extension exists in the given folder. The overwritten file will be deleted and the uploaded file will take its place with a new ID. If unset or set as false, the new file's name will be updated to prevent colliding with existing file if one exists with the same path, name, and extension
	Overwrite *bool `json:"overwrite,omitempty"`
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// URL to download the new file from.
	Url string `json:"url"`
	// One of folderId or folderPath is required. Destination folderId for the uploaded file.
	FolderId *string `json:"folderId,omitempty"`
}

type _ImportFromUrlInput ImportFromUrlInput

// NewImportFromUrlInput instantiates a new ImportFromUrlInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportFromUrlInput(access string, url string) *ImportFromUrlInput {
	this := ImportFromUrlInput{}
	this.Access = access
	this.Url = url
	return &this
}

// NewImportFromUrlInputWithDefaults instantiates a new ImportFromUrlInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportFromUrlInputWithDefaults() *ImportFromUrlInput {
	this := ImportFromUrlInput{}
	return &this
}

// GetFolderPath returns the FolderPath field value if set, zero value otherwise.
func (o *ImportFromUrlInput) GetFolderPath() string {
	if o == nil || IsNil(o.FolderPath) {
		var ret string
		return ret
	}
	return *o.FolderPath
}

// GetFolderPathOk returns a tuple with the FolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetFolderPathOk() (*string, bool) {
	if o == nil || IsNil(o.FolderPath) {
		return nil, false
	}
	return o.FolderPath, true
}

// HasFolderPath returns a boolean if a field has been set.
func (o *ImportFromUrlInput) HasFolderPath() bool {
	if o != nil && !IsNil(o.FolderPath) {
		return true
	}

	return false
}

// SetFolderPath gets a reference to the given string and assigns it to the FolderPath field.
func (o *ImportFromUrlInput) SetFolderPath(v string) {
	o.FolderPath = &v
}

// GetAccess returns the Access field value
func (o *ImportFromUrlInput) GetAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *ImportFromUrlInput) SetAccess(v string) {
	o.Access = v
}

// GetDuplicateValidationScope returns the DuplicateValidationScope field value if set, zero value otherwise.
func (o *ImportFromUrlInput) GetDuplicateValidationScope() string {
	if o == nil || IsNil(o.DuplicateValidationScope) {
		var ret string
		return ret
	}
	return *o.DuplicateValidationScope
}

// GetDuplicateValidationScopeOk returns a tuple with the DuplicateValidationScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetDuplicateValidationScopeOk() (*string, bool) {
	if o == nil || IsNil(o.DuplicateValidationScope) {
		return nil, false
	}
	return o.DuplicateValidationScope, true
}

// HasDuplicateValidationScope returns a boolean if a field has been set.
func (o *ImportFromUrlInput) HasDuplicateValidationScope() bool {
	if o != nil && !IsNil(o.DuplicateValidationScope) {
		return true
	}

	return false
}

// SetDuplicateValidationScope gets a reference to the given string and assigns it to the DuplicateValidationScope field.
func (o *ImportFromUrlInput) SetDuplicateValidationScope(v string) {
	o.DuplicateValidationScope = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImportFromUrlInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImportFromUrlInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImportFromUrlInput) SetName(v string) {
	o.Name = &v
}

// GetDuplicateValidationStrategy returns the DuplicateValidationStrategy field value if set, zero value otherwise.
func (o *ImportFromUrlInput) GetDuplicateValidationStrategy() string {
	if o == nil || IsNil(o.DuplicateValidationStrategy) {
		var ret string
		return ret
	}
	return *o.DuplicateValidationStrategy
}

// GetDuplicateValidationStrategyOk returns a tuple with the DuplicateValidationStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetDuplicateValidationStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.DuplicateValidationStrategy) {
		return nil, false
	}
	return o.DuplicateValidationStrategy, true
}

// HasDuplicateValidationStrategy returns a boolean if a field has been set.
func (o *ImportFromUrlInput) HasDuplicateValidationStrategy() bool {
	if o != nil && !IsNil(o.DuplicateValidationStrategy) {
		return true
	}

	return false
}

// SetDuplicateValidationStrategy gets a reference to the given string and assigns it to the DuplicateValidationStrategy field.
func (o *ImportFromUrlInput) SetDuplicateValidationStrategy(v string) {
	o.DuplicateValidationStrategy = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *ImportFromUrlInput) GetTtl() string {
	if o == nil || IsNil(o.Ttl) {
		var ret string
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetTtlOk() (*string, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *ImportFromUrlInput) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given string and assigns it to the Ttl field.
func (o *ImportFromUrlInput) SetTtl(v string) {
	o.Ttl = &v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *ImportFromUrlInput) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetOverwriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *ImportFromUrlInput) HasOverwrite() bool {
	if o != nil && !IsNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *ImportFromUrlInput) SetOverwrite(v bool) {
	o.Overwrite = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *ImportFromUrlInput) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *ImportFromUrlInput) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *ImportFromUrlInput) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetUrl returns the Url field value
func (o *ImportFromUrlInput) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ImportFromUrlInput) SetUrl(v string) {
	o.Url = v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *ImportFromUrlInput) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFromUrlInput) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *ImportFromUrlInput) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *ImportFromUrlInput) SetFolderId(v string) {
	o.FolderId = &v
}

func (o ImportFromUrlInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportFromUrlInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FolderPath) {
		toSerialize["folderPath"] = o.FolderPath
	}
	toSerialize["access"] = o.Access
	if !IsNil(o.DuplicateValidationScope) {
		toSerialize["duplicateValidationScope"] = o.DuplicateValidationScope
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DuplicateValidationStrategy) {
		toSerialize["duplicateValidationStrategy"] = o.DuplicateValidationStrategy
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	return toSerialize, nil
}

func (o *ImportFromUrlInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportFromUrlInput := _ImportFromUrlInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportFromUrlInput)

	if err != nil {
		return err
	}

	*o = ImportFromUrlInput(varImportFromUrlInput)

	return err
}

type NullableImportFromUrlInput struct {
	value *ImportFromUrlInput
	isSet bool
}

func (v NullableImportFromUrlInput) Get() *ImportFromUrlInput {
	return v.value
}

func (v *NullableImportFromUrlInput) Set(val *ImportFromUrlInput) {
	v.value = val
	v.isSet = true
}

func (v NullableImportFromUrlInput) IsSet() bool {
	return v.isSet
}

func (v *NullableImportFromUrlInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportFromUrlInput(val *ImportFromUrlInput) *NullableImportFromUrlInput {
	return &NullableImportFromUrlInput{value: val, isSet: true}
}

func (v NullableImportFromUrlInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportFromUrlInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


