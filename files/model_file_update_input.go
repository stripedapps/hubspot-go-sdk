/*
Files

Upload and manage files.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the FileUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileUpdateInput{}

// FileUpdateInput Object for updating files.
type FileUpdateInput struct {
	// NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 
	Access *string `json:"access,omitempty"`
	// FolderId where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.
	ParentFolderId *string `json:"parentFolderId,omitempty"`
	// New name for the file.
	Name *string `json:"name,omitempty"`
	// Folder path where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.
	ParentFolderPath *string `json:"parentFolderPath,omitempty"`
	ClearExpires *bool `json:"clearExpires,omitempty"`
	// Mark whether the file should be used in new content or not.
	IsUsableInContent *bool `json:"isUsableInContent,omitempty"`
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
}

// NewFileUpdateInput instantiates a new FileUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUpdateInput() *FileUpdateInput {
	this := FileUpdateInput{}
	return &this
}

// NewFileUpdateInputWithDefaults instantiates a new FileUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUpdateInputWithDefaults() *FileUpdateInput {
	this := FileUpdateInput{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *FileUpdateInput) GetAccess() string {
	if o == nil || IsNil(o.Access) {
		var ret string
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUpdateInput) GetAccessOk() (*string, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *FileUpdateInput) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given string and assigns it to the Access field.
func (o *FileUpdateInput) SetAccess(v string) {
	o.Access = &v
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise.
func (o *FileUpdateInput) GetParentFolderId() string {
	if o == nil || IsNil(o.ParentFolderId) {
		var ret string
		return ret
	}
	return *o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUpdateInput) GetParentFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderId) {
		return nil, false
	}
	return o.ParentFolderId, true
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *FileUpdateInput) HasParentFolderId() bool {
	if o != nil && !IsNil(o.ParentFolderId) {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given string and assigns it to the ParentFolderId field.
func (o *FileUpdateInput) SetParentFolderId(v string) {
	o.ParentFolderId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileUpdateInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUpdateInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileUpdateInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileUpdateInput) SetName(v string) {
	o.Name = &v
}

// GetParentFolderPath returns the ParentFolderPath field value if set, zero value otherwise.
func (o *FileUpdateInput) GetParentFolderPath() string {
	if o == nil || IsNil(o.ParentFolderPath) {
		var ret string
		return ret
	}
	return *o.ParentFolderPath
}

// GetParentFolderPathOk returns a tuple with the ParentFolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUpdateInput) GetParentFolderPathOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderPath) {
		return nil, false
	}
	return o.ParentFolderPath, true
}

// HasParentFolderPath returns a boolean if a field has been set.
func (o *FileUpdateInput) HasParentFolderPath() bool {
	if o != nil && !IsNil(o.ParentFolderPath) {
		return true
	}

	return false
}

// SetParentFolderPath gets a reference to the given string and assigns it to the ParentFolderPath field.
func (o *FileUpdateInput) SetParentFolderPath(v string) {
	o.ParentFolderPath = &v
}

// GetClearExpires returns the ClearExpires field value if set, zero value otherwise.
func (o *FileUpdateInput) GetClearExpires() bool {
	if o == nil || IsNil(o.ClearExpires) {
		var ret bool
		return ret
	}
	return *o.ClearExpires
}

// GetClearExpiresOk returns a tuple with the ClearExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUpdateInput) GetClearExpiresOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearExpires) {
		return nil, false
	}
	return o.ClearExpires, true
}

// HasClearExpires returns a boolean if a field has been set.
func (o *FileUpdateInput) HasClearExpires() bool {
	if o != nil && !IsNil(o.ClearExpires) {
		return true
	}

	return false
}

// SetClearExpires gets a reference to the given bool and assigns it to the ClearExpires field.
func (o *FileUpdateInput) SetClearExpires(v bool) {
	o.ClearExpires = &v
}

// GetIsUsableInContent returns the IsUsableInContent field value if set, zero value otherwise.
func (o *FileUpdateInput) GetIsUsableInContent() bool {
	if o == nil || IsNil(o.IsUsableInContent) {
		var ret bool
		return ret
	}
	return *o.IsUsableInContent
}

// GetIsUsableInContentOk returns a tuple with the IsUsableInContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUpdateInput) GetIsUsableInContentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUsableInContent) {
		return nil, false
	}
	return o.IsUsableInContent, true
}

// HasIsUsableInContent returns a boolean if a field has been set.
func (o *FileUpdateInput) HasIsUsableInContent() bool {
	if o != nil && !IsNil(o.IsUsableInContent) {
		return true
	}

	return false
}

// SetIsUsableInContent gets a reference to the given bool and assigns it to the IsUsableInContent field.
func (o *FileUpdateInput) SetIsUsableInContent(v bool) {
	o.IsUsableInContent = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *FileUpdateInput) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUpdateInput) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *FileUpdateInput) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *FileUpdateInput) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

func (o FileUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.ParentFolderId) {
		toSerialize["parentFolderId"] = o.ParentFolderId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ParentFolderPath) {
		toSerialize["parentFolderPath"] = o.ParentFolderPath
	}
	if !IsNil(o.ClearExpires) {
		toSerialize["clearExpires"] = o.ClearExpires
	}
	if !IsNil(o.IsUsableInContent) {
		toSerialize["isUsableInContent"] = o.IsUsableInContent
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	return toSerialize, nil
}

type NullableFileUpdateInput struct {
	value *FileUpdateInput
	isSet bool
}

func (v NullableFileUpdateInput) Get() *FileUpdateInput {
	return v.value
}

func (v *NullableFileUpdateInput) Set(val *FileUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUpdateInput(val *FileUpdateInput) *NullableFileUpdateInput {
	return &NullableFileUpdateInput{value: val, isSet: true}
}

func (v NullableFileUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


