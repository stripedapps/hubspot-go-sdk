openapi: 3.0.1
info:
  description: Upload and manage files.
  title: Files
  version: v3
  x-hubspot-product-tier-requirements:
    marketing: FREE
    sales: FREE
    service: FREE
    cms: STARTER
  x-hubspot-api-use-case: "When launching a company rebrand, upload a new set of branded\
    \ images and assets to the file manager so that marketing and sales teams can\
    \ update their assets accordingly."
  x-hubspot-related-documentation:
  - name: Files Guide
    url: https://developers.hubspot.com/docs/guides/api/library/files
  x-hubspot-introduction: "Use the files API to manage and store files in HubSpot's\
    \ file manager tool. Files can be used throughout other HubSpot tools, such as\
    \ inserting image files into emails."
servers:
- url: https://api.hubapi.com
tags:
- name: Files
- name: Folders
paths:
  /files/v3/files/{fileId}/gdpr-delete:
    delete:
      description: Delete a file in accordance with GDPR regulations.
      operationId: "delete-/files/v3/files/{fileId}/gdpr-delete_delete"
      parameters:
      - description: ID of file to GDPR delete
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No content
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: GDPR-delete file
      tags:
      - Files
  /files/v3/files/{fileId}:
    delete:
      description: Delete a file by ID
      operationId: "delete-/files/v3/files/{fileId}_archive"
      parameters:
      - description: FileId to delete
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No content
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Delete file by ID
      tags:
      - Files
    get:
      description: Retrieve a file by its ID.
      operationId: "get-/files/v3/files/{fileId}_getById"
      parameters:
      - description: ID of the desired file.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      - description: "null"
        explode: true
        in: query
        name: properties
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - private_apps:
        - files.ui_hidden.read
      - oauth2:
        - files.ui_hidden.read
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Retrieve file by ID
      tags:
      - Files
    patch:
      description: Update properties of file by ID.
      operationId: "patch-/files/v3/files/{fileId}_updateProperties"
      parameters:
      - description: ID of file to update
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUpdateInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Update file properties
      tags:
      - Files
    put:
      description: Replace existing file data with new file data. Can be used to change
        image content without having to upload a new file and update all references.
      operationId: "put-/files/v3/files/{fileId}_replace"
      parameters:
      - description: ID of the desired file.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/put__files_v3_files__fileId__replace_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Replace file
      tags:
      - Files
  /files/v3/folders/{folderId}:
    delete:
      description: Delete folder by ID.
      operationId: "delete-/files/v3/folders/{folderId}_archive"
      parameters:
      - description: ID of folder to delete.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No content
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Delete folder by ID
      tags:
      - Folders
    get:
      description: Retrieve a folder by its ID.
      operationId: "get-/files/v3/folders/{folderId}_getById"
      parameters:
      - description: ID of desired folder
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      - description: Properties to set on returned folder.
        explode: true
        in: query
        name: properties
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - private_apps:
        - files.ui_hidden.read
      - oauth2:
        - files.ui_hidden.read
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Retrieve folder by ID
      tags:
      - Folders
    patch:
      description: "Update a folder's properties, identified by folder ID."
      operationId: "patch-/files/v3/folders/{folderId}_updateProperties"
      parameters:
      - description: ID of folder to update
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderUpdateInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Update folder properties by folder ID
      tags:
      - Folders
  /files/v3/files:
    post:
      description: Upload a single file with content specified in request body.
      operationId: post-/files/v3/files_upload
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/post__files_v3_files_upload_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Upload file
      tags:
      - Files
  /files/v3/folders:
    post:
      description: Creates a folder.
      operationId: post-/files/v3/folders_create
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderInput'
        description: Folder creation options
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Create folder
      tags:
      - Folders
  /files/v3/files/{fileId}/signed-url:
    get:
      description: Generates signed URL that allows temporary access to a private
        file.
      operationId: "get-/files/v3/files/{fileId}/signed-url_getSignedUrl"
      parameters:
      - description: ID of file.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          pattern: \d+
          type: string
        style: simple
      - description: "For image files. This will resize the image to the desired size\
          \ before sharing. Does not affect the original file, just the file served\
          \ by this signed URL."
        explode: true
        in: query
        name: size
        required: false
        schema:
          enum:
          - thumb
          - icon
          - medium
          - preview
          type: string
        style: form
      - description: How long in seconds the link will provide access to the file.
        explode: true
        in: query
        name: expirationSeconds
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "If size is provided, this will upscale the image to fit the\
          \ size dimensions."
        explode: true
        in: query
        name: upscale
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedUrl'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - private_apps:
        - files.ui_hidden.read
      - oauth2:
        - files.ui_hidden.read
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Get signed URL to access private file
      tags:
      - Files
  /files/v3/files/import-from-url/async:
    post:
      description: Asynchronously imports the file at the given URL into the file
        manager.
      operationId: post-/files/v3/files/import-from-url/async_importFromUrl
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportFromUrlInput'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportFromUrlTaskLocator'
          description: accepted
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Import file from URL
      tags:
      - Files
  /files/v3/files/stat/{path}:
    get:
      description: Retrieve a file by its path.
      operationId: "get-/files/v3/files/stat/{path}_getMetadata"
      parameters:
      - description: 'The path of the file. '
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .+
          type: string
        style: simple
      - description: Properties to return in the response.
        explode: true
        in: query
        name: properties
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStat'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - private_apps:
        - files.ui_hidden.read
      - oauth2:
        - files.ui_hidden.read
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Retrieve file by path
      tags:
      - Files
  /files/v3/folders/search:
    get:
      description: Search for folders. Does not contain hidden or archived folders.
      operationId: get-/files/v3/folders/search_doSearch
      parameters:
      - description: Properties that should be included in the returned folders.
        explode: true
        in: query
        name: properties
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "Offset search results by this value. The default offset is 0\
          \ and the maximum offset of items for a given search is 10,000. Narrow your\
          \ search down if you are reaching this limit."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: "Number of items to return. Default limit is 10, maximum limit\
          \ is 100."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Sort results by given property. For example -name sorts by name\
          \ field descending, name sorts by name field ascending."
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: ""
        explode: true
        in: query
        name: ids
        required: false
        schema:
          items:
            format: int64
            type: integer
          type: array
        style: form
      - description: ""
        explode: true
        in: query
        name: idLte
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: idGte
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search folders by exact time of creation. Time must be epoch
          time in milliseconds.
        explode: true
        in: query
        name: createdAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search folders by less than or equal to time of creation. Can
          be used with createdAtGte to create a range.
        explode: true
        in: query
        name: createdAtLte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search folders by greater than or equal to time of creation.
          Can be used with createdAtLte to create a range.
        explode: true
        in: query
        name: createdAtGte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search folders by exact time of latest updated. Time must be
          epoch time in milliseconds.
        explode: true
        in: query
        name: updatedAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search folders by less than or equal to time of latest update.
          Can be used with updatedAtGte to create a range.
        explode: true
        in: query
        name: updatedAtLte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search folders by greater than or equal to time of latest update.
          Can be used with updatedAtLte to create a range.
        explode: true
        in: query
        name: updatedAtGte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search for folders containing the specified name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Search folders by path.
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: Search folders with the given parent folderId.
        explode: true
        in: query
        name: parentFolderIds
        required: false
        schema:
          items:
            format: int64
            type: integer
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponseFolder'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - private_apps:
        - files.ui_hidden.read
      - oauth2:
        - files.ui_hidden.read
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Search folders
      tags:
      - Folders
  /files/v3/folders/update/async/tasks/{taskId}/status:
    get:
      description: Check status of folder update. Folder updates happen asynchronously.
      operationId: "get-/files/v3/folders/update/async/tasks/{taskId}/status_checkUpdateStatus"
      parameters:
      - description: The ID of the folder update task.
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderActionResponse'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Check folder update status
      tags:
      - Folders
  /files/v3/files/search:
    get:
      description: Search through files in the file manager. Does not display hidden
        or archived files.
      operationId: get-/files/v3/files/search_doSearch
      parameters:
      - description: A list of file properties to return.
        explode: true
        in: query
        name: properties
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "Offset search results by this value. The default offset is 0\
          \ and the maximum offset of items for a given search is 10,000. Narrow your\
          \ search down if you are reaching this limit."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: "Number of items to return. Default limit is 10, maximum limit\
          \ is 100."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Sort files by a given field.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Search by a list of file IDs.
        explode: true
        in: query
        name: ids
        required: false
        schema:
          items:
            format: int64
            type: integer
          type: array
        style: form
      - description: ""
        explode: true
        in: query
        name: idLte
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: idGte
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search files by time of creation.
        explode: true
        in: query
        name: createdAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search files by less than or equal to time of creation. Can be
          used with `createdAtGte` to create a range.
        explode: true
        in: query
        name: createdAtLte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search files by greater than or equal to time of creation. Can
          be used with `createdAtLte` to create a range.
        explode: true
        in: query
        name: createdAtGte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search files by time of latest updated.
        explode: true
        in: query
        name: updatedAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search files by less than or equal to time of latest update.
          Can be used with `updatedAtGte` to create a range.
        explode: true
        in: query
        name: updatedAtLte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search files by greater than or equal to time of latest update.
          Can be used with `updatedAtLte` to create a range.
        explode: true
        in: query
        name: updatedAtGte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search for files containing the given name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Search files by path.
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: Search files within given `folderId`.
        explode: true
        in: query
        name: parentFolderIds
        required: false
        schema:
          items:
            format: int64
            type: integer
          type: array
        style: form
      - description: Search files by exact file size in bytes.
        explode: true
        in: query
        name: size
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search files by less than or equal to file size. Can be used
          with `sizeGte` to create a range.
        explode: true
        in: query
        name: sizeLte
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search files by greater than or equal to file size. Can be used
          with `sizeLte` to create a range.
        explode: true
        in: query
        name: sizeGte
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search files by height of image or video.
        explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search files by less than or equal to height of image or video.
          Can be used with `heightGte` to create a range.
        explode: true
        in: query
        name: heightLte
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search files by greater than or equal to height of image or video.
          Can be used with `heightLte` to create a range.
        explode: true
        in: query
        name: heightGte
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search files by width of image or video.
        explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search files by less than or equal to width of image or video.
          Can be used with `widthGte` to create a range.
        explode: true
        in: query
        name: widthLte
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search files by greater than or equal to width of image or video.
          Can be used with `widthLte` to create a range.
        explode: true
        in: query
        name: widthGte
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Search files by specified encoding.
        explode: true
        in: query
        name: encoding
        required: false
        schema:
          type: string
        style: form
      - description: Filter by provided file type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Search files by given extension.
        explode: true
        in: query
        name: extension
        required: false
        schema:
          type: string
        style: form
      - description: Search by file URL.
        explode: true
        in: query
        name: url
        required: false
        schema:
          type: string
        style: form
      - description: "If `true`, shows files that have been marked to be used in new\
          \ content. If `false`, shows files that should not be used in new content."
        explode: true
        in: query
        name: isUsableInContent
        required: false
        schema:
          type: boolean
        style: form
      - description: "Search files by access. If `true`, will show only public files.\
          \ If `false`, will show only private files."
        explode: true
        in: query
        name: allowsAnonymousAccess
        required: false
        schema:
          type: boolean
        style: form
      - description: Search files by a specific md5 hash.
        explode: true
        in: query
        name: fileMd5
        required: false
        schema:
          type: string
        style: form
      - description: Search files by exact expires time. Time must be epoch time in
          milliseconds.
        explode: true
        in: query
        name: expiresAt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search files by less than or equal to expires time. Can be used
          with `expiresAtGte` to create a range.
        explode: true
        in: query
        name: expiresAtLte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Search files by greater than or equal to expires time. Can be
          used with `expiresAtLte` to create a range.
        explode: true
        in: query
        name: expiresAtGte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponseFile'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - private_apps:
        - files.ui_hidden.read
      - oauth2:
        - files.ui_hidden.read
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Search files
      tags:
      - Files
  /files/v3/folders/{folderPath}:
    delete:
      description: "Delete a folder, identified by its path."
      operationId: "delete-/files/v3/folders/{folderPath}_archiveByPath"
      parameters:
      - description: Path of folder to delete
        explode: false
        in: path
        name: folderPath
        required: true
        schema:
          pattern: .+
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No content
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Delete folder by path
      tags:
      - Folders
    get:
      description: "Retrieve a folder, identified by its path."
      operationId: "get-/files/v3/folders/{folderPath}_getByPath"
      parameters:
      - description: Path of desired folder.
        explode: false
        in: path
        name: folderPath
        required: true
        schema:
          pattern: .+
          type: string
        style: simple
      - description: Properties to set on returned folder.
        explode: true
        in: query
        name: properties
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - private_apps:
        - files.ui_hidden.read
      - oauth2:
        - files.ui_hidden.read
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Retrieve folder by path
      tags:
      - Folders
  /files/v3/folders/update/async:
    post:
      description: Update properties of folder by given ID. This action happens asynchronously
        and will update all of the folder's children as well.
      operationId: post-/files/v3/folders/update/async_updatePropertiesRecursively
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderUpdateInputWithId'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderUpdateTaskLocator'
          description: accepted
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Update folder properties
      tags:
      - Folders
  /files/v3/files/import-from-url/async/tasks/{taskId}/status:
    get:
      description: Check the status of requested import.
      operationId: "get-/files/v3/files/import-from-url/async/tasks/{taskId}/status_checkImport"
      parameters:
      - description: Import by URL task ID
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileActionResponse'
          description: successful operation
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: An error occurred.
      security:
      - private_apps:
        - files.ui_hidden.read
      - oauth2:
        - files.ui_hidden.read
      - oauth2:
        - files
      - private_apps:
        - files
      summary: Check import status
      tags:
      - Files
components:
  responses:
    Error:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      description: An error occurred.
  schemas:
    StandardError:
      example:
        subCategory: "{}"
        context:
          key:
          - context
          - context
        links:
          key: links
        id: id
        category: category
        message: message
        errors:
        - subCategory: subCategory
          code: code
          in: in
          context:
            missingScopes:
            - scope1
            - scope2
          message: message
        - subCategory: subCategory
          code: code
          in: in
          context:
            missingScopes:
            - scope1
            - scope2
          message: message
        status: status
      properties:
        subCategory:
          properties: {}
          type: object
        context:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        links:
          additionalProperties:
            type: string
          type: object
        id:
          type: string
        category:
          type: string
        message:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
        status:
          type: string
      required:
      - category
      - context
      - errors
      - links
      - message
      - status
      type: object
    FolderUpdateInput:
      description: Object for updating folders.
      example:
        parentFolderId: 0
        name: name
      properties:
        parentFolderId:
          description: "New parent folderId. If changed, the folder and all it's children\
            \ will be moved into the specified folder. parentFolderId and parentFolderPath\
            \ cannot be specified at the same time."
          format: int64
          type: integer
        name:
          description: New name. If specified the folder's name and fullPath will
            change. All children of the folder will be updated accordingly.
          type: string
      type: object
    FolderActionResponse:
      example:
        result:
          createdAt: 2000-01-23T04:56:07.000+00:00
          archivedAt: 2000-01-23T04:56:07.000+00:00
          path: path
          archived: true
          parentFolderId: parentFolderId
          name: name
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        completedAt: 2000-01-23T04:56:07.000+00:00
        numErrors: 0
        requestedAt: 2000-01-23T04:56:07.000+00:00
        startedAt: 2000-01-23T04:56:07.000+00:00
        links:
          key: links
        errors:
        - subCategory: "{}"
          context:
            key:
            - context
            - context
          links:
            key: links
          id: id
          category: category
          message: message
          errors:
          - subCategory: subCategory
            code: code
            in: in
            context:
              missingScopes:
              - scope1
              - scope2
            message: message
          - subCategory: subCategory
            code: code
            in: in
            context:
              missingScopes:
              - scope1
              - scope2
            message: message
          status: status
        - subCategory: "{}"
          context:
            key:
            - context
            - context
          links:
            key: links
          id: id
          category: category
          message: message
          errors:
          - subCategory: subCategory
            code: code
            in: in
            context:
              missingScopes:
              - scope1
              - scope2
            message: message
          - subCategory: subCategory
            code: code
            in: in
            context:
              missingScopes:
              - scope1
              - scope2
            message: message
          status: status
        taskId: taskId
        status: PENDING
      properties:
        result:
          $ref: '#/components/schemas/Folder'
        completedAt:
          description: When the requested changes have been completed.
          format: date-time
          type: string
        numErrors:
          description: Number of errors resulting from the requested changes.
          format: int32
          type: integer
        requestedAt:
          description: Timestamp representing when the task was requested.
          format: date-time
          type: string
        startedAt:
          description: Timestamp representing when the task was started at.
          format: date-time
          type: string
        links:
          additionalProperties:
            type: string
          description: Link to check the status of the task.
          type: object
        errors:
          description: Detailed errors resulting from the task.
          items:
            $ref: '#/components/schemas/StandardError'
          type: array
        taskId:
          description: ID of the task.
          type: string
        status:
          description: Current status of the task.
          enum:
          - PENDING
          - PROCESSING
          - CANCELED
          - COMPLETE
          type: string
      required:
      - completedAt
      - startedAt
      - status
      - taskId
      type: object
    Paging:
      example:
        next:
          link: link
          after: after
        prev:
          before: before
          link: link
      properties:
        next:
          $ref: '#/components/schemas/NextPage'
        prev:
          $ref: '#/components/schemas/PreviousPage'
      type: object
    Error:
      example:
        message: Invalid input (details will vary based on the error)
        correlationId: aeb5f871-7f07-4993-9211-075dc63e7cbf
        category: VALIDATION_ERROR
        links:
          knowledge-base: https://www.hubspot.com/products/service/knowledge-base
      properties:
        subCategory:
          description: A specific category that contains more specific detail about
            the error
          type: string
        context:
          additionalProperties:
            items:
              type: string
            type: array
          description: Context about the error condition
          example:
            missingScopes:
            - scope1
            - scope2
            invalidPropertyName:
            - propertyValue
          type: object
        correlationId:
          description: A unique identifier for the request. Include this value with
            any error reports or support tickets
          example: aeb5f871-7f07-4993-9211-075dc63e7cbf
          format: uuid
          type: string
        links:
          additionalProperties:
            type: string
          description: A map of link names to associated URIs containing documentation
            about the error or recommended remediation steps
          example:
            knowledge-base: https://www.hubspot.com/products/service/knowledge-base
          type: object
        message:
          description: A human readable message describing the error along with remediation
            steps where appropriate
          example: Invalid input (details will vary based on the error)
          type: string
        category:
          description: The error category
          example: VALIDATION_ERROR
          type: string
        errors:
          description: further information about the error
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      required:
      - category
      - correlationId
      - message
      type: object
    Folder:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        archivedAt: 2000-01-23T04:56:07.000+00:00
        path: path
        archived: true
        parentFolderId: parentFolderId
        name: name
        id: id
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          description: Timestamp of folder creation.
          format: date-time
          type: string
        archivedAt:
          description: Timestamp of folder deletion.
          format: date-time
          type: string
        path:
          description: Path of the folder in the file manager.
          type: string
        archived:
          description: Marks whether the folder is deleted or not.
          type: boolean
        parentFolderId:
          description: ID of the parent folder.
          type: string
        name:
          description: Name of the folder.
          type: string
        id:
          description: ID of the folder.
          type: string
        updatedAt:
          description: Timestamp of the latest update to the folder.
          format: date-time
          type: string
      required:
      - archived
      - createdAt
      - id
      - updatedAt
      type: object
    CollectionResponseFile:
      description: Collections of files
      example:
        paging:
          next:
            link: link
            after: after
          prev:
            before: before
            link: link
        results:
        - extension: extension
          access: PUBLIC_INDEXABLE
          parentFolderId: parentFolderId
          sourceGroup: sourceGroup
          fileMd5: fileMd5
          encoding: encoding
          type: type
          isUsableInContent: true
          url: url
          expiresAt: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          archivedAt: 2000-01-23T04:56:07.000+00:00
          path: path
          archived: true
          size: 6
          name: name
          width: 1
          id: id
          defaultHostingUrl: defaultHostingUrl
          updatedAt: 2000-01-23T04:56:07.000+00:00
          height: 5
        - extension: extension
          access: PUBLIC_INDEXABLE
          parentFolderId: parentFolderId
          sourceGroup: sourceGroup
          fileMd5: fileMd5
          encoding: encoding
          type: type
          isUsableInContent: true
          url: url
          expiresAt: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          archivedAt: 2000-01-23T04:56:07.000+00:00
          path: path
          archived: true
          size: 6
          name: name
          width: 1
          id: id
          defaultHostingUrl: defaultHostingUrl
          updatedAt: 2000-01-23T04:56:07.000+00:00
          height: 5
      properties:
        paging:
          $ref: '#/components/schemas/Paging'
        results:
          description: ""
          items:
            $ref: '#/components/schemas/File'
          type: array
      required:
      - results
      type: object
    ErrorDetail:
      example:
        subCategory: subCategory
        code: code
        in: in
        context:
          missingScopes:
          - scope1
          - scope2
        message: message
      properties:
        subCategory:
          description: A specific category that contains more specific detail about
            the error
          type: string
        code:
          description: The status code associated with the error detail
          type: string
        in:
          description: The name of the field or parameter in which the error was found.
          type: string
        context:
          additionalProperties:
            items:
              type: string
            type: array
          description: Context about the error condition
          example:
            missingScopes:
            - scope1
            - scope2
          type: object
        message:
          description: A human readable message describing the error along with remediation
            steps where appropriate
          type: string
      required:
      - message
      type: object
    FileActionResponse:
      example:
        result:
          extension: extension
          access: PUBLIC_INDEXABLE
          parentFolderId: parentFolderId
          sourceGroup: sourceGroup
          fileMd5: fileMd5
          encoding: encoding
          type: type
          isUsableInContent: true
          url: url
          expiresAt: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          archivedAt: 2000-01-23T04:56:07.000+00:00
          path: path
          archived: true
          size: 6
          name: name
          width: 1
          id: id
          defaultHostingUrl: defaultHostingUrl
          updatedAt: 2000-01-23T04:56:07.000+00:00
          height: 5
        completedAt: 2000-01-23T04:56:07.000+00:00
        numErrors: 0
        requestedAt: 2000-01-23T04:56:07.000+00:00
        startedAt: 2000-01-23T04:56:07.000+00:00
        links:
          key: links
        errors:
        - subCategory: "{}"
          context:
            key:
            - context
            - context
          links:
            key: links
          id: id
          category: category
          message: message
          errors:
          - subCategory: subCategory
            code: code
            in: in
            context:
              missingScopes:
              - scope1
              - scope2
            message: message
          - subCategory: subCategory
            code: code
            in: in
            context:
              missingScopes:
              - scope1
              - scope2
            message: message
          status: status
        - subCategory: "{}"
          context:
            key:
            - context
            - context
          links:
            key: links
          id: id
          category: category
          message: message
          errors:
          - subCategory: subCategory
            code: code
            in: in
            context:
              missingScopes:
              - scope1
              - scope2
            message: message
          - subCategory: subCategory
            code: code
            in: in
            context:
              missingScopes:
              - scope1
              - scope2
            message: message
          status: status
        taskId: taskId
        status: PENDING
      properties:
        result:
          $ref: '#/components/schemas/File'
        completedAt:
          description: Time of completion of task.
          format: date-time
          type: string
        numErrors:
          description: Number of errors resulting from the task.
          format: int32
          type: integer
        requestedAt:
          description: Timestamp of when the task was requested.
          format: date-time
          type: string
        startedAt:
          description: Timestamp of when the task was started.
          format: date-time
          type: string
        links:
          additionalProperties:
            type: string
          description: Link to check the status of the requested task.
          type: object
        errors:
          description: Descriptive error messages.
          items:
            $ref: '#/components/schemas/StandardError'
          type: array
        taskId:
          description: ID of the requested task.
          type: string
        status:
          description: Current status of the task.
          enum:
          - PENDING
          - PROCESSING
          - CANCELED
          - COMPLETE
          type: string
      required:
      - completedAt
      - startedAt
      - status
      - taskId
      type: object
    CollectionResponseFolder:
      example:
        paging:
          next:
            link: link
            after: after
          prev:
            before: before
            link: link
        results:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          archivedAt: 2000-01-23T04:56:07.000+00:00
          path: path
          archived: true
          parentFolderId: parentFolderId
          name: name
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          archivedAt: 2000-01-23T04:56:07.000+00:00
          path: path
          archived: true
          parentFolderId: parentFolderId
          name: name
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        paging:
          $ref: '#/components/schemas/Paging'
        results:
          description: ""
          items:
            $ref: '#/components/schemas/Folder'
          type: array
      required:
      - results
      type: object
    FileStat:
      example:
        file:
          extension: extension
          access: PUBLIC_INDEXABLE
          parentFolderId: parentFolderId
          sourceGroup: sourceGroup
          fileMd5: fileMd5
          encoding: encoding
          type: type
          isUsableInContent: true
          url: url
          expiresAt: 0
          createdAt: 2000-01-23T04:56:07.000+00:00
          archivedAt: 2000-01-23T04:56:07.000+00:00
          path: path
          archived: true
          size: 6
          name: name
          width: 1
          id: id
          defaultHostingUrl: defaultHostingUrl
          updatedAt: 2000-01-23T04:56:07.000+00:00
          height: 5
        folder:
          createdAt: 2000-01-23T04:56:07.000+00:00
          archivedAt: 2000-01-23T04:56:07.000+00:00
          path: path
          archived: true
          parentFolderId: parentFolderId
          name: name
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        file:
          $ref: '#/components/schemas/File'
        folder:
          $ref: '#/components/schemas/Folder'
      type: object
    ImportFromUrlInput:
      example:
        folderPath: folderPath
        access: PUBLIC_INDEXABLE
        duplicateValidationScope: ENTIRE_PORTAL
        name: name
        duplicateValidationStrategy: NONE
        ttl: ttl
        overwrite: true
        expiresAt: 2000-01-23T04:56:07.000+00:00
        url: url
        folderId: folderId
      properties:
        folderPath:
          description: "One of folderPath or folderId is required. Destination folder\
            \ path for the uploaded file. If the folder path does not exist, there\
            \ will be an attempt to create the folder path."
          type: string
        access:
          description: |
            PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file.
          enum:
          - PUBLIC_INDEXABLE
          - PUBLIC_NOT_INDEXABLE
          - HIDDEN_INDEXABLE
          - HIDDEN_NOT_INDEXABLE
          - HIDDEN_PRIVATE
          - PRIVATE
          - HIDDEN_SENSITIVE
          - SENSITIVE
          type: string
        duplicateValidationScope:
          description: |
            ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder.
          enum:
          - ENTIRE_PORTAL
          - EXACT_FOLDER
          type: string
        name:
          description: Name to give the resulting file in the file manager.
          type: string
        duplicateValidationStrategy:
          description: |
            NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.
          enum:
          - NONE
          - REJECT
          - RETURN_EXISTING
          type: string
        ttl:
          description: "Time to live. If specified the file will be deleted after\
            \ the given time frame. If left unset, the file will exist indefinitely"
          type: string
        overwrite:
          description: "If true, will overwrite existing file if one with the same\
            \ name and extension exists in the given folder. The overwritten file\
            \ will be deleted and the uploaded file will take its place with a new\
            \ ID. If unset or set as false, the new file's name will be updated to\
            \ prevent colliding with existing file if one exists with the same path,\
            \ name, and extension"
          type: boolean
        expiresAt:
          format: date-time
          type: string
        url:
          description: URL to download the new file from.
          type: string
        folderId:
          description: One of folderId or folderPath is required. Destination folderId
            for the uploaded file.
          type: string
      required:
      - access
      - url
      type: object
    FileUpdateInput:
      description: Object for updating files.
      example:
        access: PUBLIC_INDEXABLE
        parentFolderId: parentFolderId
        name: name
        parentFolderPath: parentFolderPath
        clearExpires: true
        isUsableInContent: true
        expiresAt: 2000-01-23T04:56:07.000+00:00
      properties:
        access:
          description: |
            NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.
          enum:
          - PUBLIC_INDEXABLE
          - PUBLIC_NOT_INDEXABLE
          - HIDDEN_INDEXABLE
          - HIDDEN_NOT_INDEXABLE
          - HIDDEN_PRIVATE
          - PRIVATE
          - HIDDEN_SENSITIVE
          - SENSITIVE
          type: string
        parentFolderId:
          description: FolderId where the file should be moved to. folderId and folderPath
            parameters cannot be set at the same time.
          type: string
        name:
          description: New name for the file.
          type: string
        parentFolderPath:
          description: Folder path where the file should be moved to. folderId and
            folderPath parameters cannot be set at the same time.
          type: string
        clearExpires:
          type: boolean
        isUsableInContent:
          description: Mark whether the file should be used in new content or not.
          type: boolean
        expiresAt:
          format: date-time
          type: string
      type: object
    SignedUrl:
      description: Signed Url object with optional ancillary metadata of requested
        file
      example:
        extension: extension
        size: 0
        name: name
        width: 6
        type: type
        url: url
        expiresAt: 2000-01-23T04:56:07.000+00:00
        height: 1
      properties:
        extension:
          description: Extension of the requested file.
          type: string
        size:
          description: Size in bytes of the requested file.
          format: int64
          type: integer
        name:
          description: Name of the requested file.
          type: string
        width:
          description: For image and video files. The width of the file.
          format: int32
          type: integer
        type:
          description: "Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER."
          type: string
        url:
          description: Signed URL with access to the specified file. Anyone with this
            URL will be able to access the file until it expires.
          type: string
        expiresAt:
          description: Timestamp of when the URL will no longer grant access to the
            file.
          format: date-time
          type: string
        height:
          description: For image and video files. The height of the file.
          format: int32
          type: integer
      required:
      - expiresAt
      - extension
      - name
      - size
      - type
      - url
      type: object
    PreviousPage:
      example:
        before: before
        link: link
      properties:
        before:
          type: string
        link:
          type: string
      required:
      - before
      type: object
    FolderInput:
      description: Object for creating a folder.
      example:
        parentFolderId: parentFolderId
        parentPath: parentPath
        name: name
      properties:
        parentFolderId:
          description: "FolderId of the parent of the created folder. If not specified,\
            \ the folder will be created at the root level. parentFolderId and parentFolderPath\
            \ cannot be set at the same time."
          type: string
        parentPath:
          description: Path of the parent of the created folder. If not specified
            the folder will be created at the root level. parentFolderPath and parentFolderId
            cannot be set at the same time.
          type: string
        name:
          description: Desired name for the folder.
          type: string
      required:
      - name
      type: object
    FolderUpdateInputWithId:
      example:
        parentFolderId: 0
        name: name
        id: id
      properties:
        parentFolderId:
          format: int64
          type: integer
        name:
          type: string
        id:
          type: string
      required:
      - id
      type: object
    ImportFromUrlTaskLocator:
      description: "Information on the task that has been started, and where to check\
        \ it's status."
      example:
        id: 57122e26-59f8-4cfc-ba53-96e30c816762
        links:
        - status: https://api.hubspot.com/files/v3/files/import-from-url/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status
      properties:
        links:
          additionalProperties:
            type: string
          description: Links for where to check information related to the task. The
            `status` link gives the URL for where to check the status of the task.
          example:
          - status: https://api.hubspot.com/files/v3/files/import-from-url/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status
          type: object
        id:
          description: ID of the task
          example: 57122e26-59f8-4cfc-ba53-96e30c816762
          type: string
      required:
      - id
      - links
      type: object
    File:
      description: File
      example:
        extension: extension
        access: PUBLIC_INDEXABLE
        parentFolderId: parentFolderId
        sourceGroup: sourceGroup
        fileMd5: fileMd5
        encoding: encoding
        type: type
        isUsableInContent: true
        url: url
        expiresAt: 0
        createdAt: 2000-01-23T04:56:07.000+00:00
        archivedAt: 2000-01-23T04:56:07.000+00:00
        path: path
        archived: true
        size: 6
        name: name
        width: 1
        id: id
        defaultHostingUrl: defaultHostingUrl
        updatedAt: 2000-01-23T04:56:07.000+00:00
        height: 5
      properties:
        extension:
          description: "Extension of the file. ex: .jpg, .png, .gif, .pdf, etc."
          type: string
        access:
          description: "File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE,\
            \ PRIVATE."
          enum:
          - PUBLIC_INDEXABLE
          - PUBLIC_NOT_INDEXABLE
          - HIDDEN_INDEXABLE
          - HIDDEN_NOT_INDEXABLE
          - HIDDEN_PRIVATE
          - PRIVATE
          - HIDDEN_SENSITIVE
          - SENSITIVE
          type: string
        parentFolderId:
          description: ID of the folder the file is in.
          type: string
        sourceGroup:
          type: string
        fileMd5:
          type: string
        encoding:
          description: Encoding of the file.
          type: string
        type:
          description: "Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER."
          type: string
        isUsableInContent:
          description: Previously "archied". Indicates if the file should be used
            when creating new content like web pages.
          type: boolean
        url:
          description: URL of the given file. This URL can change depending on the
            domain settings of the account. Will use the select file hosting domain.
          type: string
        expiresAt:
          format: int64
          type: integer
        createdAt:
          description: Creation time of the file object.
          format: date-time
          type: string
        archivedAt:
          description: Deletion time of the file object.
          format: date-time
          type: string
        path:
          description: Path of the file in the file manager.
          type: string
        archived:
          description: If the file is deleted.
          type: boolean
        size:
          description: Size of the file in bytes.
          format: int64
          type: integer
        name:
          description: Name of the file.
          type: string
        width:
          description: "For image and video files, the width of the content."
          format: int32
          type: integer
        id:
          description: File ID.
          type: string
        defaultHostingUrl:
          description: Default hosting URL of the file. This will use one of HubSpot's
            provided URLs to serve the file.
          type: string
        updatedAt:
          description: Timestamp of the latest update to the file.
          format: date-time
          type: string
        height:
          description: "For image and video files, the height of the content."
          format: int32
          type: integer
      required:
      - access
      - archived
      - createdAt
      - id
      - updatedAt
      type: object
    NextPage:
      example:
        link: link
        after: after
      properties:
        link:
          type: string
        after:
          type: string
      required:
      - after
      type: object
    FolderUpdateTaskLocator:
      description: "Information on the task that has been started, and where to check\
        \ it's status."
      example:
        id: 57122e26-59f8-4cfc-ba53-96e30c816762
        links:
        - status: https://api.hubspot.com/files/v3/folders/update/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status
      properties:
        links:
          additionalProperties:
            type: string
          description: Links for where to check information related to the task. The
            `status` link gives the URL for where to check the status of the task.
          example:
          - status: https://api.hubspot.com/files/v3/folders/update/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status
          type: object
        id:
          description: ID of the task
          example: 57122e26-59f8-4cfc-ba53-96e30c816762
          type: string
      required:
      - id
      - links
      type: object
    put__files_v3_files__fileId__replace_request:
      properties:
        file:
          description: File data that will replace existing file in the file manager.
          format: binary
          type: string
        charsetHunch:
          description: Character set of given file data.
          type: string
        options:
          description: "JSON string representing FileReplaceOptions. Includes options\
            \ to set the access and expiresAt properties, which will automatically\
            \ update when the file is replaced."
          type: string
      type: object
    post__files_v3_files_upload_request:
      properties:
        file:
          description: File to be uploaded.
          format: binary
          type: string
        folderId:
          description: Either 'folderId' or 'folderPath' is required. folderId is
            the ID of the folder the file will be uploaded to.
          type: string
        folderPath:
          description: "Either 'folderPath' or 'folderId' is required. This field\
            \ represents the destination folder path for the uploaded file. If a path\
            \ doesn't exist, the system will try to create one."
          type: string
        fileName:
          description: Desired name for the uploaded file.
          type: string
        charsetHunch:
          description: Character set of the uploaded file.
          type: string
        options:
          description: JSON string representing FileUploadOptions.
          type: string
      type: object
  securitySchemes:
    oauth2:
      flows:
        authorizationCode:
          authorizationUrl: https://app.hubspot.com/oauth/authorize
          scopes:
            files: Read from and write to my Files
            files.ui_hidden.read: View hidden files
          tokenUrl: https://api.hubapi.com/oauth/v1/token
      type: oauth2
    private_apps:
      in: header
      name: private-app
      type: apiKey
x-hubspot-available-client-libraries:
- PHP
- Node
- Ruby
- Python
x-hubspot-product-tier-requirements:
  marketing: FREE
  sales: FREE
  service: FREE
  cms: STARTER
