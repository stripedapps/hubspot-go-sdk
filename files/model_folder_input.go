/*
Files

Upload and manage files.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FolderInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderInput{}

// FolderInput Object for creating a folder.
type FolderInput struct {
	// FolderId of the parent of the created folder. If not specified, the folder will be created at the root level. parentFolderId and parentFolderPath cannot be set at the same time.
	ParentFolderId *string `json:"parentFolderId,omitempty"`
	// Path of the parent of the created folder. If not specified the folder will be created at the root level. parentFolderPath and parentFolderId cannot be set at the same time.
	ParentPath *string `json:"parentPath,omitempty"`
	// Desired name for the folder.
	Name string `json:"name"`
}

type _FolderInput FolderInput

// NewFolderInput instantiates a new FolderInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderInput(name string) *FolderInput {
	this := FolderInput{}
	this.Name = name
	return &this
}

// NewFolderInputWithDefaults instantiates a new FolderInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderInputWithDefaults() *FolderInput {
	this := FolderInput{}
	return &this
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise.
func (o *FolderInput) GetParentFolderId() string {
	if o == nil || IsNil(o.ParentFolderId) {
		var ret string
		return ret
	}
	return *o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderInput) GetParentFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderId) {
		return nil, false
	}
	return o.ParentFolderId, true
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *FolderInput) HasParentFolderId() bool {
	if o != nil && !IsNil(o.ParentFolderId) {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given string and assigns it to the ParentFolderId field.
func (o *FolderInput) SetParentFolderId(v string) {
	o.ParentFolderId = &v
}

// GetParentPath returns the ParentPath field value if set, zero value otherwise.
func (o *FolderInput) GetParentPath() string {
	if o == nil || IsNil(o.ParentPath) {
		var ret string
		return ret
	}
	return *o.ParentPath
}

// GetParentPathOk returns a tuple with the ParentPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderInput) GetParentPathOk() (*string, bool) {
	if o == nil || IsNil(o.ParentPath) {
		return nil, false
	}
	return o.ParentPath, true
}

// HasParentPath returns a boolean if a field has been set.
func (o *FolderInput) HasParentPath() bool {
	if o != nil && !IsNil(o.ParentPath) {
		return true
	}

	return false
}

// SetParentPath gets a reference to the given string and assigns it to the ParentPath field.
func (o *FolderInput) SetParentPath(v string) {
	o.ParentPath = &v
}

// GetName returns the Name field value
func (o *FolderInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FolderInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FolderInput) SetName(v string) {
	o.Name = v
}

func (o FolderInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentFolderId) {
		toSerialize["parentFolderId"] = o.ParentFolderId
	}
	if !IsNil(o.ParentPath) {
		toSerialize["parentPath"] = o.ParentPath
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *FolderInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFolderInput := _FolderInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFolderInput)

	if err != nil {
		return err
	}

	*o = FolderInput(varFolderInput)

	return err
}

type NullableFolderInput struct {
	value *FolderInput
	isSet bool
}

func (v NullableFolderInput) Get() *FolderInput {
	return v.value
}

func (v *NullableFolderInput) Set(val *FolderInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderInput(val *FolderInput) *NullableFolderInput {
	return &NullableFolderInput{value: val, isSet: true}
}

func (v NullableFolderInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


