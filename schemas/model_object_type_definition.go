/*
Schemas

The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object's type, properties, and associations. The schema can be uniquely identified by its **object type ID**.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ObjectTypeDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectTypeDefinition{}

// ObjectTypeDefinition Defines an object type.
type ObjectTypeDefinition struct {
	// The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.
	SecondaryDisplayProperties []string `json:"secondaryDisplayProperties,omitempty"`
	ObjectTypeId *string `json:"objectTypeId,omitempty"`
	Description *string `json:"description,omitempty"`
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty"`
	Labels ObjectTypeDefinitionLabels `json:"labels"`
	Archived *bool `json:"archived,omitempty"`
	// When the object type was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The names of properties that should be **required** when creating an object of this type.
	RequiredProperties []string `json:"requiredProperties"`
	// Names of properties that will be indexed for this object type in by HubSpot's product search.
	SearchableProperties []string `json:"searchableProperties,omitempty"`
	// The ID of the account that this object type is specific to.
	PortalId *int32 `json:"portalId,omitempty"`
	// The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type.
	PrimaryDisplayProperty *string `json:"primaryDisplayProperty,omitempty"`
	// A unique name for this object. For internal use only.
	Name string `json:"name"`
	// A unique ID for this object type. Will be defined as {meta-type}-{unique ID}.
	Id string `json:"id"`
	// When the object type was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _ObjectTypeDefinition ObjectTypeDefinition

// NewObjectTypeDefinition instantiates a new ObjectTypeDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectTypeDefinition(labels ObjectTypeDefinitionLabels, requiredProperties []string, name string, id string) *ObjectTypeDefinition {
	this := ObjectTypeDefinition{}
	this.Labels = labels
	this.RequiredProperties = requiredProperties
	this.Name = name
	this.Id = id
	return &this
}

// NewObjectTypeDefinitionWithDefaults instantiates a new ObjectTypeDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectTypeDefinitionWithDefaults() *ObjectTypeDefinition {
	this := ObjectTypeDefinition{}
	return &this
}

// GetSecondaryDisplayProperties returns the SecondaryDisplayProperties field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetSecondaryDisplayProperties() []string {
	if o == nil || IsNil(o.SecondaryDisplayProperties) {
		var ret []string
		return ret
	}
	return o.SecondaryDisplayProperties
}

// GetSecondaryDisplayPropertiesOk returns a tuple with the SecondaryDisplayProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetSecondaryDisplayPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.SecondaryDisplayProperties) {
		return nil, false
	}
	return o.SecondaryDisplayProperties, true
}

// HasSecondaryDisplayProperties returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasSecondaryDisplayProperties() bool {
	if o != nil && !IsNil(o.SecondaryDisplayProperties) {
		return true
	}

	return false
}

// SetSecondaryDisplayProperties gets a reference to the given []string and assigns it to the SecondaryDisplayProperties field.
func (o *ObjectTypeDefinition) SetSecondaryDisplayProperties(v []string) {
	o.SecondaryDisplayProperties = v
}

// GetObjectTypeId returns the ObjectTypeId field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetObjectTypeId() string {
	if o == nil || IsNil(o.ObjectTypeId) {
		var ret string
		return ret
	}
	return *o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetObjectTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectTypeId) {
		return nil, false
	}
	return o.ObjectTypeId, true
}

// HasObjectTypeId returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasObjectTypeId() bool {
	if o != nil && !IsNil(o.ObjectTypeId) {
		return true
	}

	return false
}

// SetObjectTypeId gets a reference to the given string and assigns it to the ObjectTypeId field.
func (o *ObjectTypeDefinition) SetObjectTypeId(v string) {
	o.ObjectTypeId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ObjectTypeDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetFullyQualifiedName() string {
	if o == nil || IsNil(o.FullyQualifiedName) {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullyQualifiedName) {
		return nil, false
	}
	return o.FullyQualifiedName, true
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasFullyQualifiedName() bool {
	if o != nil && !IsNil(o.FullyQualifiedName) {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given string and assigns it to the FullyQualifiedName field.
func (o *ObjectTypeDefinition) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName = &v
}

// GetLabels returns the Labels field value
func (o *ObjectTypeDefinition) GetLabels() ObjectTypeDefinitionLabels {
	if o == nil {
		var ret ObjectTypeDefinitionLabels
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetLabelsOk() (*ObjectTypeDefinitionLabels, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *ObjectTypeDefinition) SetLabels(v ObjectTypeDefinitionLabels) {
	o.Labels = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *ObjectTypeDefinition) SetArchived(v bool) {
	o.Archived = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ObjectTypeDefinition) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetRequiredProperties returns the RequiredProperties field value
func (o *ObjectTypeDefinition) GetRequiredProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RequiredProperties
}

// GetRequiredPropertiesOk returns a tuple with the RequiredProperties field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetRequiredPropertiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredProperties, true
}

// SetRequiredProperties sets field value
func (o *ObjectTypeDefinition) SetRequiredProperties(v []string) {
	o.RequiredProperties = v
}

// GetSearchableProperties returns the SearchableProperties field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetSearchableProperties() []string {
	if o == nil || IsNil(o.SearchableProperties) {
		var ret []string
		return ret
	}
	return o.SearchableProperties
}

// GetSearchablePropertiesOk returns a tuple with the SearchableProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetSearchablePropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchableProperties) {
		return nil, false
	}
	return o.SearchableProperties, true
}

// HasSearchableProperties returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasSearchableProperties() bool {
	if o != nil && !IsNil(o.SearchableProperties) {
		return true
	}

	return false
}

// SetSearchableProperties gets a reference to the given []string and assigns it to the SearchableProperties field.
func (o *ObjectTypeDefinition) SetSearchableProperties(v []string) {
	o.SearchableProperties = v
}

// GetPortalId returns the PortalId field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetPortalId() int32 {
	if o == nil || IsNil(o.PortalId) {
		var ret int32
		return ret
	}
	return *o.PortalId
}

// GetPortalIdOk returns a tuple with the PortalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetPortalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PortalId) {
		return nil, false
	}
	return o.PortalId, true
}

// HasPortalId returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasPortalId() bool {
	if o != nil && !IsNil(o.PortalId) {
		return true
	}

	return false
}

// SetPortalId gets a reference to the given int32 and assigns it to the PortalId field.
func (o *ObjectTypeDefinition) SetPortalId(v int32) {
	o.PortalId = &v
}

// GetPrimaryDisplayProperty returns the PrimaryDisplayProperty field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetPrimaryDisplayProperty() string {
	if o == nil || IsNil(o.PrimaryDisplayProperty) {
		var ret string
		return ret
	}
	return *o.PrimaryDisplayProperty
}

// GetPrimaryDisplayPropertyOk returns a tuple with the PrimaryDisplayProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetPrimaryDisplayPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryDisplayProperty) {
		return nil, false
	}
	return o.PrimaryDisplayProperty, true
}

// HasPrimaryDisplayProperty returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasPrimaryDisplayProperty() bool {
	if o != nil && !IsNil(o.PrimaryDisplayProperty) {
		return true
	}

	return false
}

// SetPrimaryDisplayProperty gets a reference to the given string and assigns it to the PrimaryDisplayProperty field.
func (o *ObjectTypeDefinition) SetPrimaryDisplayProperty(v string) {
	o.PrimaryDisplayProperty = &v
}

// GetName returns the Name field value
func (o *ObjectTypeDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjectTypeDefinition) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *ObjectTypeDefinition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjectTypeDefinition) SetId(v string) {
	o.Id = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ObjectTypeDefinition) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinition) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ObjectTypeDefinition) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ObjectTypeDefinition) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ObjectTypeDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectTypeDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SecondaryDisplayProperties) {
		toSerialize["secondaryDisplayProperties"] = o.SecondaryDisplayProperties
	}
	if !IsNil(o.ObjectTypeId) {
		toSerialize["objectTypeId"] = o.ObjectTypeId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FullyQualifiedName) {
		toSerialize["fullyQualifiedName"] = o.FullyQualifiedName
	}
	toSerialize["labels"] = o.Labels
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["requiredProperties"] = o.RequiredProperties
	if !IsNil(o.SearchableProperties) {
		toSerialize["searchableProperties"] = o.SearchableProperties
	}
	if !IsNil(o.PortalId) {
		toSerialize["portalId"] = o.PortalId
	}
	if !IsNil(o.PrimaryDisplayProperty) {
		toSerialize["primaryDisplayProperty"] = o.PrimaryDisplayProperty
	}
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *ObjectTypeDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"labels",
		"requiredProperties",
		"name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectTypeDefinition := _ObjectTypeDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectTypeDefinition)

	if err != nil {
		return err
	}

	*o = ObjectTypeDefinition(varObjectTypeDefinition)

	return err
}

type NullableObjectTypeDefinition struct {
	value *ObjectTypeDefinition
	isSet bool
}

func (v NullableObjectTypeDefinition) Get() *ObjectTypeDefinition {
	return v.value
}

func (v *NullableObjectTypeDefinition) Set(val *ObjectTypeDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectTypeDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectTypeDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectTypeDefinition(val *ObjectTypeDefinition) *NullableObjectTypeDefinition {
	return &NullableObjectTypeDefinition{value: val, isSet: true}
}

func (v NullableObjectTypeDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectTypeDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


