/*
Oauth

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TokensAPIService TokensAPI service
type TokensAPIService service

type ApiPostOauthV1TokenCreateRequest struct {
	ctx context.Context
	ApiService *TokensAPIService
	grantType *string
	code *string
	redirectUri *string
	clientId *string
	clientSecret *string
	refreshToken *string
}

func (r ApiPostOauthV1TokenCreateRequest) GrantType(grantType string) ApiPostOauthV1TokenCreateRequest {
	r.grantType = &grantType
	return r
}

func (r ApiPostOauthV1TokenCreateRequest) Code(code string) ApiPostOauthV1TokenCreateRequest {
	r.code = &code
	return r
}

func (r ApiPostOauthV1TokenCreateRequest) RedirectUri(redirectUri string) ApiPostOauthV1TokenCreateRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r ApiPostOauthV1TokenCreateRequest) ClientId(clientId string) ApiPostOauthV1TokenCreateRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostOauthV1TokenCreateRequest) ClientSecret(clientSecret string) ApiPostOauthV1TokenCreateRequest {
	r.clientSecret = &clientSecret
	return r
}

func (r ApiPostOauthV1TokenCreateRequest) RefreshToken(refreshToken string) ApiPostOauthV1TokenCreateRequest {
	r.refreshToken = &refreshToken
	return r
}

func (r ApiPostOauthV1TokenCreateRequest) Execute() (*TokenResponseIF, *http.Response, error) {
	return r.ApiService.PostOauthV1TokenCreateExecute(r)
}

/*
PostOauthV1TokenCreate Method for PostOauthV1TokenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostOauthV1TokenCreateRequest
*/
func (a *TokensAPIService) PostOauthV1TokenCreate(ctx context.Context) ApiPostOauthV1TokenCreateRequest {
	return ApiPostOauthV1TokenCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TokenResponseIF
func (a *TokensAPIService) PostOauthV1TokenCreateExecute(r ApiPostOauthV1TokenCreateRequest) (*TokenResponseIF, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TokenResponseIF
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokensAPIService.PostOauthV1TokenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/v1/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.grantType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "grant_type", r.grantType, "")
	}
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "code", r.code, "")
	}
	if r.redirectUri != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "redirect_uri", r.redirectUri, "")
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "client_id", r.clientId, "")
	}
	if r.clientSecret != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "client_secret", r.clientSecret, "")
	}
	if r.refreshToken != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "refresh_token", r.refreshToken, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
