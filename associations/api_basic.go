/*
CRM Associations

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BasicAPIService BasicAPI service
type BasicAPIService service

type ApiDeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchiveRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	objectType string
	objectId string
	toObjectType string
	toObjectId string
}

func (r ApiDeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchiveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchiveExecute(r)
}

/*
DeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchive Delete

deletes all associations between two records.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectType
 @param objectId
 @param toObjectType
 @param toObjectId
 @return ApiDeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchiveRequest
*/
func (a *BasicAPIService) DeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchive(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string) ApiDeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchiveRequest {
	return ApiDeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchiveRequest{
		ApiService: a,
		ctx: ctx,
		objectType: objectType,
		objectId: objectId,
		toObjectType: toObjectType,
		toObjectId: toObjectId,
	}
}

// Execute executes the request
func (a *BasicAPIService) DeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchiveExecute(r ApiDeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchiveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.DeleteCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdArchive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectType"+"}", url.PathEscape(parameterValueToString(r.objectType, "objectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectId"+"}", url.PathEscape(parameterValueToString(r.objectId, "objectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterValueToString(r.toObjectType, "toObjectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectId"+"}", url.PathEscape(parameterValueToString(r.toObjectId, "toObjectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	objectType string
	objectId string
	toObjectType string
	after *string
	limit *int32
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest) After(after string) ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest {
	r.after = &after
	return r
}

// The maximum number of results to display per page.
func (r ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest) Limit(limit int32) ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest {
	r.limit = &limit
	return r
}

func (r ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest) Execute() (*CollectionResponseMultiAssociatedObjectWithLabelForwardPaging, *http.Response, error) {
	return r.ApiService.GetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageExecute(r)
}

/*
GetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPage List

List all associations of an object by object type. Limit 500 per call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectType
 @param objectId
 @param toObjectType
 @return ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest
*/
func (a *BasicAPIService) GetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPage(ctx context.Context, objectType string, objectId string, toObjectType string) ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest {
	return ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest{
		ApiService: a,
		ctx: ctx,
		objectType: objectType,
		objectId: objectId,
		toObjectType: toObjectType,
	}
}

// Execute executes the request
//  @return CollectionResponseMultiAssociatedObjectWithLabelForwardPaging
func (a *BasicAPIService) GetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageExecute(r ApiGetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPageRequest) (*CollectionResponseMultiAssociatedObjectWithLabelForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionResponseMultiAssociatedObjectWithLabelForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.GetCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/objects/{objectType}/{objectId}/associations/{toObjectType}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectType"+"}", url.PathEscape(parameterValueToString(r.objectType, "objectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectId"+"}", url.PathEscape(parameterValueToString(r.objectId, "objectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterValueToString(r.toObjectType, "toObjectType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefaultRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	fromObjectType string
	fromObjectId string
	toObjectType string
	toObjectId string
}

func (r ApiPutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefaultRequest) Execute() (*BatchResponsePublicDefaultAssociation, *http.Response, error) {
	return r.ApiService.PutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefaultExecute(r)
}

/*
PutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefault Create Default

Create the default (most generic) association type between two object types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fromObjectType
 @param fromObjectId
 @param toObjectType
 @param toObjectId
 @return ApiPutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefaultRequest
*/
func (a *BasicAPIService) PutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefault(ctx context.Context, fromObjectType string, fromObjectId string, toObjectType string, toObjectId string) ApiPutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefaultRequest {
	return ApiPutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefaultRequest{
		ApiService: a,
		ctx: ctx,
		fromObjectType: fromObjectType,
		fromObjectId: fromObjectId,
		toObjectType: toObjectType,
		toObjectId: toObjectId,
	}
}

// Execute executes the request
//  @return BatchResponsePublicDefaultAssociation
func (a *BasicAPIService) PutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefaultExecute(r ApiPutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefaultRequest) (*BatchResponsePublicDefaultAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchResponsePublicDefaultAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.PutCrmV4ObjectsFromObjectTypeFromObjectIdAssociationsDefaultToObjectTypeToObjectIdCreateDefault")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/objects/{fromObjectType}/{fromObjectId}/associations/default/{toObjectType}/{toObjectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectType"+"}", url.PathEscape(parameterValueToString(r.fromObjectType, "fromObjectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fromObjectId"+"}", url.PathEscape(parameterValueToString(r.fromObjectId, "fromObjectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterValueToString(r.toObjectType, "toObjectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectId"+"}", url.PathEscape(parameterValueToString(r.toObjectId, "toObjectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateRequest struct {
	ctx context.Context
	ApiService *BasicAPIService
	objectType string
	objectId string
	toObjectType string
	toObjectId string
	associationSpec *[]AssociationSpec
}

func (r ApiPutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateRequest) AssociationSpec(associationSpec []AssociationSpec) ApiPutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateRequest {
	r.associationSpec = &associationSpec
	return r
}

func (r ApiPutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateRequest) Execute() (*LabelsBetweenObjectPair, *http.Response, error) {
	return r.ApiService.PutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateExecute(r)
}

/*
PutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreate Create

Set association labels between two records.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objectType
 @param objectId
 @param toObjectType
 @param toObjectId
 @return ApiPutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateRequest
*/
func (a *BasicAPIService) PutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreate(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string) ApiPutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateRequest {
	return ApiPutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateRequest{
		ApiService: a,
		ctx: ctx,
		objectType: objectType,
		objectId: objectId,
		toObjectType: toObjectType,
		toObjectId: toObjectId,
	}
}

// Execute executes the request
//  @return LabelsBetweenObjectPair
func (a *BasicAPIService) PutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateExecute(r ApiPutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreateRequest) (*LabelsBetweenObjectPair, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LabelsBetweenObjectPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicAPIService.PutCrmV4ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v4/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"objectType"+"}", url.PathEscape(parameterValueToString(r.objectType, "objectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectId"+"}", url.PathEscape(parameterValueToString(r.objectId, "objectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectType"+"}", url.PathEscape(parameterValueToString(r.toObjectType, "toObjectType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toObjectId"+"}", url.PathEscape(parameterValueToString(r.toObjectId, "toObjectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.associationSpec == nil {
		return localVarReturnValue, nil, reportError("associationSpec is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.associationSpec
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
