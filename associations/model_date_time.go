/*
CRM Associations

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DateTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateTime{}

// DateTime struct for DateTime
type DateTime struct {
	DateOnly bool `json:"dateOnly"`
	TimeZoneShift int32 `json:"timeZoneShift"`
	Value int32 `json:"value"`
}

type _DateTime DateTime

// NewDateTime instantiates a new DateTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTime(dateOnly bool, timeZoneShift int32, value int32) *DateTime {
	this := DateTime{}
	this.DateOnly = dateOnly
	this.TimeZoneShift = timeZoneShift
	this.Value = value
	return &this
}

// NewDateTimeWithDefaults instantiates a new DateTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeWithDefaults() *DateTime {
	this := DateTime{}
	return &this
}

// GetDateOnly returns the DateOnly field value
func (o *DateTime) GetDateOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DateOnly
}

// GetDateOnlyOk returns a tuple with the DateOnly field value
// and a boolean to check if the value has been set.
func (o *DateTime) GetDateOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateOnly, true
}

// SetDateOnly sets field value
func (o *DateTime) SetDateOnly(v bool) {
	o.DateOnly = v
}

// GetTimeZoneShift returns the TimeZoneShift field value
func (o *DateTime) GetTimeZoneShift() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimeZoneShift
}

// GetTimeZoneShiftOk returns a tuple with the TimeZoneShift field value
// and a boolean to check if the value has been set.
func (o *DateTime) GetTimeZoneShiftOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeZoneShift, true
}

// SetTimeZoneShift sets field value
func (o *DateTime) SetTimeZoneShift(v int32) {
	o.TimeZoneShift = v
}

// GetValue returns the Value field value
func (o *DateTime) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DateTime) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DateTime) SetValue(v int32) {
	o.Value = v
}

func (o DateTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dateOnly"] = o.DateOnly
	toSerialize["timeZoneShift"] = o.TimeZoneShift
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *DateTime) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dateOnly",
		"timeZoneShift",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDateTime := _DateTime{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDateTime)

	if err != nil {
		return err
	}

	*o = DateTime(varDateTime)

	return err
}

type NullableDateTime struct {
	value *DateTime
	isSet bool
}

func (v NullableDateTime) Get() *DateTime {
	return v.value
}

func (v *NullableDateTime) Set(val *DateTime) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTime) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTime(val *DateTime) *NullableDateTime {
	return &NullableDateTime{value: val, isSet: true}
}

func (v NullableDateTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


