/*
CRM Associations

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportCreationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportCreationResponse{}

// ReportCreationResponse struct for ReportCreationResponse
type ReportCreationResponse struct {
	UserEmail string `json:"userEmail"`
	UserId int32 `json:"userId"`
	EnqueueTime DateTime `json:"enqueueTime"`
}

type _ReportCreationResponse ReportCreationResponse

// NewReportCreationResponse instantiates a new ReportCreationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportCreationResponse(userEmail string, userId int32, enqueueTime DateTime) *ReportCreationResponse {
	this := ReportCreationResponse{}
	this.UserEmail = userEmail
	this.UserId = userId
	this.EnqueueTime = enqueueTime
	return &this
}

// NewReportCreationResponseWithDefaults instantiates a new ReportCreationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportCreationResponseWithDefaults() *ReportCreationResponse {
	this := ReportCreationResponse{}
	return &this
}

// GetUserEmail returns the UserEmail field value
func (o *ReportCreationResponse) GetUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value
// and a boolean to check if the value has been set.
func (o *ReportCreationResponse) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEmail, true
}

// SetUserEmail sets field value
func (o *ReportCreationResponse) SetUserEmail(v string) {
	o.UserEmail = v
}

// GetUserId returns the UserId field value
func (o *ReportCreationResponse) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ReportCreationResponse) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ReportCreationResponse) SetUserId(v int32) {
	o.UserId = v
}

// GetEnqueueTime returns the EnqueueTime field value
func (o *ReportCreationResponse) GetEnqueueTime() DateTime {
	if o == nil {
		var ret DateTime
		return ret
	}

	return o.EnqueueTime
}

// GetEnqueueTimeOk returns a tuple with the EnqueueTime field value
// and a boolean to check if the value has been set.
func (o *ReportCreationResponse) GetEnqueueTimeOk() (*DateTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnqueueTime, true
}

// SetEnqueueTime sets field value
func (o *ReportCreationResponse) SetEnqueueTime(v DateTime) {
	o.EnqueueTime = v
}

func (o ReportCreationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportCreationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userEmail"] = o.UserEmail
	toSerialize["userId"] = o.UserId
	toSerialize["enqueueTime"] = o.EnqueueTime
	return toSerialize, nil
}

func (o *ReportCreationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userEmail",
		"userId",
		"enqueueTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportCreationResponse := _ReportCreationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportCreationResponse)

	if err != nil {
		return err
	}

	*o = ReportCreationResponse(varReportCreationResponse)

	return err
}

type NullableReportCreationResponse struct {
	value *ReportCreationResponse
	isSet bool
}

func (v NullableReportCreationResponse) Get() *ReportCreationResponse {
	return v.value
}

func (v *NullableReportCreationResponse) Set(val *ReportCreationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReportCreationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReportCreationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportCreationResponse(val *ReportCreationResponse) *NullableReportCreationResponse {
	return &NullableReportCreationResponse{value: val, isSet: true}
}

func (v NullableReportCreationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportCreationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


