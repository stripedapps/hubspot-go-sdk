/*
CRM Associations

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LabelsBetweenObjectPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelsBetweenObjectPair{}

// LabelsBetweenObjectPair struct for LabelsBetweenObjectPair
type LabelsBetweenObjectPair struct {
	FromObjectTypeId string `json:"fromObjectTypeId"`
	ToObjectId string `json:"toObjectId"`
	ToObjectTypeId string `json:"toObjectTypeId"`
	FromObjectId string `json:"fromObjectId"`
	Labels []string `json:"labels"`
}

type _LabelsBetweenObjectPair LabelsBetweenObjectPair

// NewLabelsBetweenObjectPair instantiates a new LabelsBetweenObjectPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelsBetweenObjectPair(fromObjectTypeId string, toObjectId string, toObjectTypeId string, fromObjectId string, labels []string) *LabelsBetweenObjectPair {
	this := LabelsBetweenObjectPair{}
	this.FromObjectTypeId = fromObjectTypeId
	this.ToObjectId = toObjectId
	this.ToObjectTypeId = toObjectTypeId
	this.FromObjectId = fromObjectId
	this.Labels = labels
	return &this
}

// NewLabelsBetweenObjectPairWithDefaults instantiates a new LabelsBetweenObjectPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelsBetweenObjectPairWithDefaults() *LabelsBetweenObjectPair {
	this := LabelsBetweenObjectPair{}
	return &this
}

// GetFromObjectTypeId returns the FromObjectTypeId field value
func (o *LabelsBetweenObjectPair) GetFromObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromObjectTypeId
}

// GetFromObjectTypeIdOk returns a tuple with the FromObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *LabelsBetweenObjectPair) GetFromObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromObjectTypeId, true
}

// SetFromObjectTypeId sets field value
func (o *LabelsBetweenObjectPair) SetFromObjectTypeId(v string) {
	o.FromObjectTypeId = v
}

// GetToObjectId returns the ToObjectId field value
func (o *LabelsBetweenObjectPair) GetToObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToObjectId
}

// GetToObjectIdOk returns a tuple with the ToObjectId field value
// and a boolean to check if the value has been set.
func (o *LabelsBetweenObjectPair) GetToObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToObjectId, true
}

// SetToObjectId sets field value
func (o *LabelsBetweenObjectPair) SetToObjectId(v string) {
	o.ToObjectId = v
}

// GetToObjectTypeId returns the ToObjectTypeId field value
func (o *LabelsBetweenObjectPair) GetToObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToObjectTypeId
}

// GetToObjectTypeIdOk returns a tuple with the ToObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *LabelsBetweenObjectPair) GetToObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToObjectTypeId, true
}

// SetToObjectTypeId sets field value
func (o *LabelsBetweenObjectPair) SetToObjectTypeId(v string) {
	o.ToObjectTypeId = v
}

// GetFromObjectId returns the FromObjectId field value
func (o *LabelsBetweenObjectPair) GetFromObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromObjectId
}

// GetFromObjectIdOk returns a tuple with the FromObjectId field value
// and a boolean to check if the value has been set.
func (o *LabelsBetweenObjectPair) GetFromObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromObjectId, true
}

// SetFromObjectId sets field value
func (o *LabelsBetweenObjectPair) SetFromObjectId(v string) {
	o.FromObjectId = v
}

// GetLabels returns the Labels field value
func (o *LabelsBetweenObjectPair) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *LabelsBetweenObjectPair) GetLabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *LabelsBetweenObjectPair) SetLabels(v []string) {
	o.Labels = v
}

func (o LabelsBetweenObjectPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelsBetweenObjectPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromObjectTypeId"] = o.FromObjectTypeId
	toSerialize["toObjectId"] = o.ToObjectId
	toSerialize["toObjectTypeId"] = o.ToObjectTypeId
	toSerialize["fromObjectId"] = o.FromObjectId
	toSerialize["labels"] = o.Labels
	return toSerialize, nil
}

func (o *LabelsBetweenObjectPair) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromObjectTypeId",
		"toObjectId",
		"toObjectTypeId",
		"fromObjectId",
		"labels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLabelsBetweenObjectPair := _LabelsBetweenObjectPair{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLabelsBetweenObjectPair)

	if err != nil {
		return err
	}

	*o = LabelsBetweenObjectPair(varLabelsBetweenObjectPair)

	return err
}

type NullableLabelsBetweenObjectPair struct {
	value *LabelsBetweenObjectPair
	isSet bool
}

func (v NullableLabelsBetweenObjectPair) Get() *LabelsBetweenObjectPair {
	return v.value
}

func (v *NullableLabelsBetweenObjectPair) Set(val *LabelsBetweenObjectPair) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelsBetweenObjectPair) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelsBetweenObjectPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelsBetweenObjectPair(val *LabelsBetweenObjectPair) *NullableLabelsBetweenObjectPair {
	return &NullableLabelsBetweenObjectPair{value: val, isSet: true}
}

func (v NullableLabelsBetweenObjectPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelsBetweenObjectPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


